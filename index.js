const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');

const token = '7758731240:AAH6Abgf1m2zkyYpIuWQAAiIAKo-yxcBPfc';
const bot = new TelegramBot(token, { polling: true });
const adminChatId = -1002400665091; // ID –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —á–∞—Ç–∞

const usersFile = './users.json';
const finesFile = './fines.json';


const taxWorkers = [2030128216, 6343971096];  


let users = loadData(usersFile) || {};
let fines = loadData(finesFile) || {};
const authorizedUsers = []; 
const employees = []; 

function loadData(filename) {
  if (fs.existsSync(filename)) {
    const data = fs.readFileSync(filename, 'utf-8');
    return JSON.parse(data);
  }
  return null;
}

function saveData(filename, data) {
  fs.writeFileSync(filename, JSON.stringify(data, null, 2));
}
// –ö–æ–º–∞–Ω–¥–∞ /help
bot.onText(/\/help/, (msg) => {
  const chatId = msg.chat.id;

  bot.sendMessage(
    chatId,
  `üÜò –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n` +
  `/check_fines - –ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã.\n` +
  `/archive - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞—Ä—Ö–∏–≤ —à—Ç—Ä–∞—Ñ–æ–≤.\n` +
  `/contact - –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.\n` +
  `/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n\n` +
  `–ö–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º:\n` +
  `/worker_help - –ü–æ–º–æ—â—å –¥–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤.\n\n` +
  `–ö–æ–º—É –¥–µ–ª–∞—Ç—å –Ω–µ—á–µ–≥–æ - /game\n`+
  `P.s –ò–≥—Ä—ã –¥–µ–ª–∞–ª–∞ –Ω–µ–π—Ä–æ–Ω–∫–∞.\n\n` +

  `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º!`
     );

  });


function isTaxWorker(userId) {
  return taxWorkers.includes(userId);
}



bot.onText(/\/contact/, (msg) => {
  const chatId = msg.chat.id;
  const messageId = msg.message_id;

  // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  bot.deleteMessage(chatId, messageId).catch((err) => {
    console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: ${err.message}`);
  });

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –∫–Ω–æ–ø–∫–æ–π –∑–∞–∫—Ä—ã—Ç–∏—è
  bot.sendMessage(
    chatId,
    `üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n` +
    `- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞: ArtikYaYa\n` +
    `- –ì–ª–∞–≤–∞ –ù–∞–ª–æ–≥–æ–≤–æ–π: Serg03S\n` +
    `- –ì–ª–∞–≤—ã –ü–°–ú: mak097\n` +
    `- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã "–ú–µ–¥–∞":\n  ‚Ä¢ KenD_Live\n  ‚Ä¢ OPTIMUS_PM\n\n` +
    `–ú—ã —Ä–∞–¥—ã –≤–∞–º –ø–æ–º–æ—á—å!`,
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞', url: 'https://t.me/ArtikYaYa' }],
          [{ text: '–ì–ª–∞–≤–∞ –ù–∞–ª–æ–≥–æ–≤–æ–π', url: 'https://t.me/SergeySV0354' }],
          [{ text: '–ì–ª–∞–≤–∞ –ü–°–ú 1', url: 'https://t.me/mak097a' }],
          [
            { text: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä "–ú–µ–¥–∞" KenD_Live', url: 'https://t.me/KenDyxa' },
            { text: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä "–ú–µ–¥–∞" OPTIMUS_PM', url: 'https://t.me/optms4' },
          ],
          [{ text: '‚ùå –ó–∞–∫—Ä—ã—Ç—å', callback_data: 'close_contact' }],
        ],
      },
    }
  );
});


// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫—Ä—ã—Ç—å"
bot.on('callback_query', (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const messageId = callbackQuery.message.message_id;

  if (callbackQuery.data === 'close_contact') {
    bot.deleteMessage(chatId, messageId).catch((err) => {
      console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: ${err.message}`);
    });
  }
});

bot.onText(/\/delete_fine (\d+)/, (msg, match) => {
  const chatId = msg.chat.id;
  const fineIndex = match[1];

  if (!taxWorkers.includes(chatId)) {
    bot.sendMessage(chatId, 'üõë –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.');
    return;
  }

  if (fines[fineIndex]) {
    fines.splice(fineIndex, 1);
    saveData(finesFile, fines);
    bot.sendMessage(chatId, `‚úÖ –®—Ç—Ä–∞—Ñ ${fineIndex} —É–¥–∞–ª–µ–Ω.`);
  } else {
    bot.sendMessage(chatId, '‚ùå –®—Ç—Ä–∞—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
  }
});


bot.onText(/\/worker_help/, (msg) => {
  const chatId = msg.chat.id;


  if (!msg.from || !users[chatId] || !users[chatId].role.includes('worker')) {
    bot.sendMessage(chatId, 'üõë –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º –ù–∞–ª–æ–≥–æ–≤–æ–π.');
    return;
  }

  const helpMessage = `
  üîπ –ü—Ä–∏–≤–µ—Ç! –í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –ù–∞–ª–æ–≥–æ–≤–æ–π –°–µ—Ä–≤–µ—Ä–∞ –ú–µ–¥ –∏ –∫–∞–∫ –∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:

  1. /fine <ID> <–°—É–º–º–∞> <–ü—Ä–∏—á–∏–Ω–∞> - –í—ã–ø–∏—Å–∞—Ç—å —à—Ç—Ä–∞—Ñ. –í–ù–ò–ú–ê–ù–ò!!! ID —ç—Ç–æ —Ç–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–ø–∏—Å–∞–≤ /list.

  2. /list - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö.

  3. /list_payments ‚Äî –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

  4. /report_fine ‚Äî –û—Ç—á–µ—Ç –ø–æ —à—Ç—Ä–∞—Ñ–∞–º –¥–ª—è –Ω–∞–ª–æ–≥–æ–≤–æ–π.

  5. /top_debtors - –¢–æ–ø –¥–æ–ª–∂–Ω–∏–∫–æ–≤.

  6. /notify_debtors - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ–ª–≥–∞—Ö –¥–æ–ª–∂–Ω–∏–∫–∞–º.

  7. /check_user_fines - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à—Ç—Ä–∞—Ñ–∞—Ö –ª—é–¥–µ–π.

  –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:

  1. **/remove_worker <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>** ‚Äî –£–¥–∞–ª–∏—Ç—å –ø—Ä–∞–≤–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

  2. **/add_worker <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>** ‚Äî –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤.
     - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∞–≤ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ü—Ä–∏–º–µ—Ä: /add_worker 987654321.

  –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è!
  `;

  bot.sendMessage(chatId, helpMessage);
});


function isWorker(chatId) {
  return users[chatId] && users[chatId].role === 'worker';
}

function deleteActiveMessage(chatId) {
  if (activeMessages[chatId]) {
    bot.deleteMessage(chatId, activeMessages[chatId]).catch(() => {});
    delete activeMessages[chatId];
  }
}

bot.onText(/\/notify_debtors/, (msg) => {
  const chatId = msg.chat.id;

  if (!isTaxWorker(chatId)) {
    bot.sendMessage(chatId, 'üõë –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–∞–ª–æ–≥–æ–≤–æ–π.');
    return;
  }

  let notifiedCount = 0;

  for (const userId in fines) {
    const userFines = fines[userId] || [];
    const unpaidAmount = userFines
      .filter(fine => !fine.paid && !fine.cancelled)
      .reduce((sum, fine) => sum + fine.amount, 0);

    if (unpaidAmount > 0) {
      const username = users[userId]?.username || `ID: ${userId}`;
      bot.sendMessage(userId, `‚ö†Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã –Ω–∞ —Å—É–º–º—É ${unpaidAmount} –∞—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≥–∞—Å–∏—Ç–µ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å.`);
      notifiedCount++;
    }
  }

  bot.sendMessage(chatId, `‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã ${notifiedCount} –¥–æ–ª–∂–Ω–∏–∫–∞–º.`);
});



bot.onText(/\/add_worker (\d+)/, (msg, match) => {
  const chatId = msg.chat.id;
  const userIdToAdd = match[1];

  if (!taxWorkers.includes(chatId)) {
    bot.sendMessage(chatId, '‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.');
    return;
  }


  if (users[userIdToAdd]) {
    const user = users[userIdToAdd];
    if (user.role !== 'worker') {
      user.role = 'worker'; 
      saveData(usersFile, users); 

      bot.sendMessage(chatId, `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.username} (ID: ${userIdToAdd}) —Ç–µ–ø–µ—Ä—å —è–≤–ª—è–µ—Ç—Å—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–º.`);
      bot.sendMessage(userIdToAdd, `‚úÖ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤. –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã: /worker_help`);
    } else {
      bot.sendMessage(chatId, `‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.username} (ID: ${userIdToAdd}) —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–º.`);
    }
  } else {
    bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.');
  }
});
bot.onText(/\/register (.+)/, (msg, match) => {
  const chatId = msg.chat.id;
  const username = match[1].trim(); // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã

  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if (users[chatId]) {
      bot.sendMessage(chatId, '‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –Ω–∏–∫–Ω–µ–π–º —Å "@"
    if (!username.startsWith('@')) {
      bot.sendMessage(chatId, 'üõë –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Å–∏–º–≤–æ–ª–∞ "@". –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–∏–∫–Ω–µ–π–º.');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–Ω—è—Ç –ª–∏ –Ω–∏–∫–Ω–µ–π–º
    const isUsernameTaken = Object.values(users).some(user => {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏
      if (!user || !user.username) return false;
      return user.username.toLowerCase() === username.toLowerCase();
    });

    if (isUsernameTaken) {
      bot.sendMessage(chatId, `üõë –ò–º—è "${username}" —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è.`);
      return;
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users[chatId] = { 
      username, 
      balance: 0, 
      role: 'user' // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
    saveUsers(users);

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    bot.sendMessage(chatId, `‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${username}. –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: /help`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);

    bot.sendMessage(chatId, 'üõë –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

bot.onText(/\/remove_worker (\d+)/, (msg, match) => {
  const chatId = msg.chat.id;
  const userIdToRemove = match[1];

  if (!taxWorkers.includes(chatId)) {
    bot.sendMessage(chatId, '‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.');
    return;
  }


  if (users[userIdToRemove]) {
    const user = users[userIdToRemove];
    if (user.role === 'worker') {
      user.role = 'user'; 
      saveData(usersFile, users); 

      bot.sendMessage(chatId, `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.username} (ID: ${userIdToRemove}) —Ç–µ–ø–µ—Ä—å –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–º.`);
      bot.sendMessage(userIdToRemove, `‚ùå –í–∞—à–∏ –ø—Ä–∞–≤–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –±—ã–ª–∏ —Å–Ω—è—Ç—ã.`);
    } else {
      bot.sendMessage(chatId, `‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.username} (ID: ${userIdToRemove}) –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–º.`);
    }
  } else {
    bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.');
  }
});



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
function loadUsers() {
  if (fs.existsSync(usersFile)) {
    const data = fs.readFileSync(usersFile, 'utf-8');
    return JSON.parse(data);
  } else {
    return { authorizedUsers: [], employees: [] }; // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  }
}





// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
function saveData(filePath, data) {
  fs.writeFileSync(filePath, JSON.stringify(data, null, 2), 'utf-8');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ª–æ–≥–æ–≤—ã–º —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–º
function isTaxWorker(userId) {
  return users[userId] && (users[userId].role === 'worker' || users[userId].role === 'admin');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function loadUsers() {
  if (fs.existsSync(usersFile)) {
    const data = fs.readFileSync(usersFile, 'utf-8');
    return JSON.parse(data);
  }
  return {};
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —à—Ç—Ä–∞—Ñ–æ–≤
function loadFines() {
  if (fs.existsSync(finesFile)) {
    const data = fs.readFileSync(finesFile, 'utf-8');
    return JSON.parse(data);
  }
  return {};
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
function loadUsers() {
  if (fs.existsSync(usersFile)) {
    const data = fs.readFileSync(usersFile, 'utf-8');
    return JSON.parse(data);
  }
  return {};
}

function loadFines() {
  if (fs.existsSync(finesFile)) {
    const data = fs.readFileSync(finesFile, 'utf-8');
    return JSON.parse(data);
  }
  return {};
}

function saveFines() {
  fs.writeFileSync(finesFile, JSON.stringify(fines, null, 2), 'utf-8');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–º
function isWorker(userId) {
  return users[userId] && users[userId].role === 'worker';
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
function loadUsers() {
  if (fs.existsSync(usersFile)) {
    const data = fs.readFileSync(usersFile, 'utf-8');
    return JSON.parse(data);
  }
  return {};
}

function loadFines() {
  if (fs.existsSync(finesFile)) {
    const data = fs.readFileSync(finesFile, 'utf-8');
    return JSON.parse(data);
  }
  return {};
}

function saveFines() {
  fs.writeFileSync(finesFile, JSON.stringify(fines, null, 2), 'utf-8');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–º
function isWorker(userId) {
  return users[userId] && users[userId].role === 'worker';
}

function loadUsers() {
  if (fs.existsSync(usersFile)) {
    const data = fs.readFileSync(usersFile, 'utf-8');
    return JSON.parse(data);
  }
  return {};
}

function loadFines() {
  if (fs.existsSync(finesFile)) {
    const data = fs.readFileSync(finesFile, 'utf-8');
    return JSON.parse(data);
  }
  return {};
}


// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–º
function isWorker(userId) {
  return users[userId] && users[userId].role === 'worker';
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id 2030128216 (—ç—Ç–æ –æ—Å–æ–±–µ–Ω–Ω—ã–π —Ä–∞–±–æ—Ç–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å)
function isSpecialWorker(userId) {
  return userId === '2030128216';
}

bot.onText(/\/fine (@\w+|\w+) (\d+) (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;

  if (!isWorker(chatId)) {
    bot.sendMessage(chatId, '‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤.');
    return;
  }

  const targetUsername = match[1]; // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–º–∞–Ω–¥—ã
  const amount = parseInt(match[2], 10);
  const reason = match[3];

  if (isNaN(amount) || amount <= 0) {
    bot.sendMessage(chatId, '‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —à—Ç—Ä–∞—Ñ–∞.');
    return;
  }

  // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username –∏–ª–∏ first_name
  const targetUserId = Object.keys(users).find(
    (id) => 
      (users[id].username && users[id].username.toLowerCase() === targetUsername.toLowerCase()) || 
      (users[id].first_name && users[id].first_name.toLowerCase() === targetUsername.toLowerCase())
  );

  if (!targetUserId) {
    bot.sendMessage(chatId, `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetUsername} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    return;
  }

  // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –º–∞—Å—Å–∏–≤ —à—Ç—Ä–∞—Ñ–æ–≤
  fines[targetUserId] ??= [];

  fines[targetUserId].push({
    amount,
    reason,
    issuedBy: chatId,
    date: new Date().toISOString(),
    paid: false,
    confirmedBy: null, // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
    rejectedBy: null, // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –æ—Ç–∫–ª–æ–Ω—è—é—â–µ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
  });



  bot.sendMessage(
    chatId,
    `‚úÖ –®—Ç—Ä–∞—Ñ –¥–ª—è ${targetUsername} –Ω–∞ —Å—É–º–º—É ${amount} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}.`
  );

  try {
    await bot.sendMessage(
      targetUserId,
      `‚ùå –í–∞–º –≤—ã–ø–∏—Å–∞–Ω —à—Ç—Ä–∞—Ñ –Ω–∞ —Å—É–º–º—É ${amount}.\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}.\n–ù–∞–∂–º–∏—Ç–µ "–®—Ç—Ä–∞—Ñ –æ–ø–ª–∞—á–µ–Ω", –µ—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏ —à—Ç—Ä–∞—Ñ.`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '–®—Ç—Ä–∞—Ñ –æ–ø–ª–∞—á–µ–Ω',
                callback_data: `fine_paid_${targetUserId}`,
              },
            ],
          ],
        },
      }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
    bot.sendMessage(chatId, `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —à—Ç—Ä–∞—Ñ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –Ω–µ –Ω–∞—á–∏–Ω–∞–ª —á–∞—Ç —Å –±–æ—Ç–æ–º.`);
  }
});
bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const data = query.data;
    const targetUserId = data.split('_')[2];

    if (!fines[targetUserId]) {
        bot.answerCallbackQuery(query.id, { text: '‚ùå –®—Ç—Ä–∞—Ñ–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.' });
        return;
    }

    // –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ "–®—Ç—Ä–∞—Ñ –æ–ø–ª–∞—á–µ–Ω"
    if (data.startsWith('fine_paid_')) {
        // –ù–∞—Ö–æ–¥–∏–º –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π —à—Ç—Ä–∞—Ñ
        const unpaidFine = fines[targetUserId].find((fine) => !fine.paid && !fine.rejectedBy);

        if (!unpaidFine) {
            bot.answerCallbackQuery(query.id, { text: '‚úÖ –í—Å–µ —à—Ç—Ä–∞—Ñ—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.' });
            return;
        }

        // –ó–∞–ø—Ä–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
        if (unpaidFine.requestedPayment) {
            bot.answerCallbackQuery(query.id, { text: '‚ö†Ô∏è –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É.' });
            return;
        }
        unpaidFine.requestedPayment = true;


        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º
        Object.entries(users)
            .filter(([_, user]) => user.role === 'worker')
            .forEach(([workerId]) => {
                bot.sendMessage(
                    workerId,
                    `üì¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${users[targetUserId].username} –∑–∞—è–≤–∏–ª, —á—Ç–æ –æ–ø–ª–∞—Ç–∏–ª —à—Ç—Ä–∞—Ñ –Ω–∞ —Å—É–º–º—É ${unpaidFine.amount}.\n–ü—Ä–∏—á–∏–Ω–∞: ${unpaidFine.reason}.\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –æ–ø–ª–∞—Ç—É.`,
                    {
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data: `confirm_payment_${targetUserId}` },
                                    { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data: `reject_payment_${targetUserId}` },
                                ],
                            ],
                        },
                    }
                );
            });

        bot.answerCallbackQuery(query.id, { text: '‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º.' });
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã —à—Ç—Ä–∞—Ñ–∞
    if (data.startsWith('confirm_payment_') || data.startsWith('reject_payment_')) {
        const unpaidFineIndex = fines[targetUserId].findIndex((fine) => !fine.paid && !fine.rejectedBy);

        if (unpaidFineIndex === -1) {
            bot.answerCallbackQuery(query.id, { text: '‚úÖ –í—Å–µ —à—Ç—Ä–∞—Ñ—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.' });
            return;
        }

        const unpaidFine = fines[targetUserId][unpaidFineIndex];

        if (unpaidFine.paid || unpaidFine.rejectedBy) {
            bot.answerCallbackQuery(query.id, { text: '‚ùå –®—Ç—Ä–∞—Ñ —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥—Ä—É–≥–∏–º —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–º.' });
            return;
        }

        const isConfirm = data.startsWith('confirm_payment_');
        unpaidFine.paid = isConfirm;
        unpaidFine.rejectedBy = isConfirm ? null : chatId;
        unpaidFine.confirmedBy = isConfirm ? chatId : null;


        const statusText = isConfirm ? '‚úÖ –û–ø–ª–∞—á–µ–Ω–æ' : '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ';
        bot.answerCallbackQuery(query.id, { text: `‚úÖ –®—Ç—Ä–∞—Ñ ${statusText}.` });

        bot.sendMessage(
            chatId,
            `‚úÖ –°—Ç–∞—Ç—É—Å —à—Ç—Ä–∞—Ñ–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${users[targetUserId].username} –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${statusText}".`
        );

        bot.sendMessage(
            targetUserId,
            `‚úÖ –í–∞—à —à—Ç—Ä–∞—Ñ –Ω–∞ —Å—É–º–º—É ${unpaidFine.amount} –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${statusText}".`
        );

        // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É –≤—Å–µ—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
        Object.entries(users)
            .filter(([_, user]) => user.role === 'worker')
            .forEach(([workerId]) => {
                bot.editMessageReplyMarkup(
                    { inline_keyboard: [] },
                    { chat_id: workerId, message_id: unpaidFine.messageId }
                ).catch(() => {});
            });
    }
});
// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è 2030128216, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —à—Ç—Ä–∞—Ñ–∞
bot.onText(/\/change_fine_status (\d+) (\w+)/, (msg, match) => {
  const chatId = msg.chat.id;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–º —Å–∞–º—ã–º —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–º —Å ID 2030128216
  if (!isSpecialWorker(chatId)) {
    bot.sendMessage(chatId, '‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞.');
    return;
  }

  const targetUserId = match[1];
  const status = match[2].toLowerCase();

  // –ù–∞—Ö–æ–¥–∏–º —à—Ç—Ä–∞—Ñ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const unpaidFine = fines[targetUserId]?.find((fine) => !fine.paid);

  if (!unpaidFine) {
    bot.sendMessage(chatId, `‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${users[targetUserId]?.username || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'} –Ω–µ—Ç –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —à—Ç—Ä–∞—Ñ–æ–≤.`);
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω (–æ–ø–ª–∞—á–µ–Ω–æ –∏–ª–∏ –æ—Ç–∫–∞–∑–∞–Ω–æ)
  if (status !== '–æ–ø–ª–∞—á–µ–Ω–æ' && status !== '–æ—Ç–∫–∞–∑–∞–Ω–æ') {
    bot.sendMessage(chatId, '‚ùå –°—Ç–∞—Ç—É—Å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ "–æ–ø–ª–∞—á–µ–Ω–æ" –∏–ª–∏ "–æ—Ç–∫–∞–∑–∞–Ω–æ".');
    return;
  }
// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
  unpaidFine.paid = (status === '–æ–ø–ª–∞—á–µ–Ω–æ');
  unpaidFine.rejectedBy = (status === '–æ—Ç–∫–∞–∑–∞–Ω–æ') ? chatId : null;
  unpaidFine.confirmedBy = (status === '–æ–ø–ª–∞—á–µ–Ω–æ') ? chatId : null;

  

  // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–∞–±–æ—Ç–Ω–∏–∫–∞, —á—Ç–æ —Å—Ç–∞—Ç—É—Å —à—Ç—Ä–∞—Ñ–∞ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω
  bot.sendMessage(chatId, `‚úÖ –°—Ç–∞—Ç—É—Å —à—Ç—Ä–∞—Ñ–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${users[targetUserId]?.username || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ'} –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${status}".`);

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ç–æ–º, —á—Ç–æ –µ–≥–æ —Å—Ç–∞—Ç—É—Å –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω
  bot.sendMessage(
    targetUserId,
    `‚úÖ –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ —à—Ç—Ä–∞—Ñ–∞ –Ω–∞ —Å—É–º–º—É ${unpaidFine.amount} –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${status}". –ü—Ä–∏—á–∏–Ω–∞: ${unpaidFine.reason}.`
  );

  // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –æ—Å—Ç–∞–ª–∏—Å—å
  bot.editMessageReplyMarkup(
    { inline_keyboard: [] },
    { chat_id: targetUserId, message_id: unpaidFine.messageId }
  );
});
bot.onText(/\/archive/, (msg) => {
  const chatId = msg.chat.id;

  if (!users[chatId]) {
    bot.sendMessage(chatId, 'üõë –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register <–∏–º—è> –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
    return;
  }

  const userFines = fines[chatId] || [];
  const archiveList = userFines
    .filter((fine) => fine.paid || fine.cancelled)
    .map((fine, index) => {
      const status = fine.paid
        ? '–û–ø–ª–∞—á–µ–Ω'
        : fine.cancelled
        ? '–ê–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω'
        : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

      return `–®—Ç—Ä–∞—Ñ ${index + 1}:\n` +
             `- –°—É–º–º–∞: ${fine.amount} –∞—Ä\n` +
             `- –ü—Ä–∏—á–∏–Ω–∞: ${fine.reason || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
             `- –°—Ç–∞—Ç—É—Å: ${status}\n` +
             `- –î–∞—Ç–∞: ${
               fine.paidAt ? new Date(fine.paidAt).toLocaleString() : '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
             }\n\n`;
    });

  const response = archiveList.length > 0
    ? 'üìÇ –ê—Ä—Ö–∏–≤ —à—Ç—Ä–∞—Ñ–æ–≤:\n\n' + archiveList.join('')
    : 'üìÇ –£ –≤–∞—Å –Ω–µ—Ç –∞—Ä—Ö–∏–≤–Ω—ã—Ö —à—Ç—Ä–∞—Ñ–æ–≤.';

  bot.sendMessage(chatId, response, {
    reply_markup: {
      inline_keyboard: [
        [
          { text: '‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é', callback_data: 'close_menu' },
          { text: 'üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ —à—Ç—Ä–∞—Ñ—ã', callback_data: 'view_current_fines' },
        ],
      ],
    },
  }).then((message) => {
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.deleteMessage(chatId, msg.message_id);
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.on('callback_query', (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;

  if (data === 'close_menu') {
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é
    bot.deleteMessage(chatId, callbackQuery.message.message_id);
  } else if (data === 'view_current_fines') {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.deleteMessage(chatId, callbackQuery.message.message_id);

    // –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö —à—Ç—Ä–∞—Ñ–æ–≤
    const userFines = fines[chatId] || [];
    const currentFines = userFines
      .filter(fine => !fine.paid && !fine.cancelled)
      .map((fine, index) => {
        return `–®—Ç—Ä–∞—Ñ ${index + 1}:\n` +
               `- –°—É–º–º–∞: ${fine.amount} –∞—Ä\n` +
               `- –ü—Ä–∏—á–∏–Ω–∞: ${fine.reason || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
               `- –°—Ç–∞—Ç—É—Å: –ù–µ–æ–ø–ª–∞—á–µ–Ω–æ\n` +
               `- –î–∞—Ç–∞: ${new Date(fine.date).toLocaleString()}\n\n`;
      });

    const response = currentFines.length > 0
      ? 'üìã –¢–µ–∫—É—â–∏–µ —à—Ç—Ä–∞—Ñ—ã:\n\n' + currentFines.join('')
      : 'üìã –£ –≤–∞—Å –Ω–µ—Ç —Ç–µ–∫—É—â–∏—Ö —à—Ç—Ä–∞—Ñ–æ–≤.';

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ç–µ–∫—É—â–∏—Ö —à—Ç—Ä–∞—Ñ–æ–≤
    bot.sendMessage(chatId, response, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é', callback_data: 'close_menu' },
            { text: 'üìÇ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞—Ä—Ö–∏–≤ —à—Ç—Ä–∞—Ñ–æ–≤', callback_data: 'archive' },
          ],
        ],
      },
    });
  } else if (data === 'archive') {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.deleteMessage(chatId, callbackQuery.message.message_id);

    // –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∞—Ä—Ö–∏–≤–∞
    const userFines = fines[chatId] || [];
    const archiveList = userFines
      .filter((fine) => fine.paid || fine.cancelled)
      .map((fine, index) => {
        const status = fine.paid
          ? '–û–ø–ª–∞—á–µ–Ω'
          : fine.cancelled
          ? '–ê–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω'
          : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

        return `–®—Ç—Ä–∞—Ñ ${index + 1}:\n` +
               `- –°—É–º–º–∞: ${fine.amount} –∞—Ä\n` +
               `- –ü—Ä–∏—á–∏–Ω–∞: ${fine.reason || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
               `- –°—Ç–∞—Ç—É—Å: ${status}\n` +
               `- –î–∞—Ç–∞: ${
                 fine.paidAt ? new Date(fine.paidAt).toLocaleString() : '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
               }\n\n`;
      });

    const response = archiveList.length > 0
      ? 'üìÇ –ê—Ä—Ö–∏–≤ —à—Ç—Ä–∞—Ñ–æ–≤:\n\n' + archiveList.join('')
      : 'üìÇ –£ –≤–∞—Å –Ω–µ—Ç –∞—Ä—Ö–∏–≤–Ω—ã—Ö —à—Ç—Ä–∞—Ñ–æ–≤.';

    bot.sendMessage(chatId, response, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é', callback_data: 'close_menu' },
            { text: 'üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ —à—Ç—Ä–∞—Ñ—ã', callback_data: 'view_current_fines' },
          ],
        ],
      },
    });
  } else if (data === 'check_fines') {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.deleteMessage(chatId, callbackQuery.message.message_id);

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —à—Ç—Ä–∞—Ñ—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–ø–∏—Å–∞–Ω–∏–µ–º
    autoPayFines(chatId);

    const userFines = fines[chatId] || [];
    const unpaidFines = userFines.filter((fine) => !fine.paid && !fine.cancelled);

    if (unpaidFines.length > 0) {
      const fineList = unpaidFines.map((fine, index) => {
        return `–®—Ç—Ä–∞—Ñ ${index + 1}:\n` +
               `- –°—É–º–º–∞: ${fine.amount} –∞—Ä\n` +
               `- –ü—Ä–∏—á–∏–Ω–∞: ${fine.reason || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
               `- –î–∞—Ç–∞: ${new Date(fine.date).toLocaleString()}\n`;
      }).join('\n');

      bot.sendMessage(chatId, `üõë –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã:\n\n${fineList}`, {
        reply_markup: {
          inline_keyboard: [
            [
              { text: '‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é', callback_data: 'close_menu' },
              { text: 'üìÇ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞—Ä—Ö–∏–≤ —à—Ç—Ä–∞—Ñ–æ–≤', callback_data: 'archive' },
            ],
          ],
        },
      });
    } else {
      bot.sendMessage(chatId, '‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —à—Ç—Ä–∞—Ñ–æ–≤.', {
        reply_markup: {
          inline_keyboard: [
            [
              { text: '‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é', callback_data: 'close_menu' },
              { text: 'üìÇ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞—Ä—Ö–∏–≤ —à—Ç—Ä–∞—Ñ–æ–≤', callback_data: 'archive' },
            ],
          ],
        },
      });
    }
  }
});


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø–ª–∞—Ç—ã —à—Ç—Ä–∞—Ñ–æ–≤
function autoPayFines(userId) {
  const user = users[userId];
  const userFines = fines[userId] || [];

  if (!user || !userFines.length) return;

  userFines.forEach((fine) => {
    if (!fine.paid && !fine.cancelled && user.balance >= fine.amount) {
      user.balance -= fine.amount; // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—É–º–º—É —à—Ç—Ä–∞—Ñ–∞ —Å –±–∞–ª–∞–Ω—Å–∞
      fine.paid = true; // –û—Ç–º–µ—á–∞–µ–º —à—Ç—Ä–∞—Ñ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π
      fine.paidAt = new Date().toISOString(); // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞—Ç—É –æ–ø–ª–∞—Ç—ã
    }
  });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  saveData(usersFile, users);
  saveData(finesFile, fines);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
function safeDeleteMessage(chatId, messageId) {
  if (!chatId || !messageId) return; // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–∞–Ω—ã
  bot.deleteMessage(chatId, messageId).catch((err) => {
    if (err.response && err.response.body && err.response.body.description) {
      console.warn(
        `–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ${messageId} –≤ —á–∞—Ç–µ ${chatId}: ${err.response.body.description}`
      );
    } else {
      console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ${messageId} –≤ —á–∞—Ç–µ ${chatId}:`, err);
    }
  });
}

// –ö–æ–º–∞–Ω–¥–∞ /check_fines —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø–ª–∞—Ç–æ–π
bot.onText(/\/check_fines/, (msg) => {
  const chatId = msg.chat.id;

  if (!users[chatId]) {
    bot.sendMessage(chatId, 'üõë –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register <–∏–º—è> –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
    return;
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø–ª–∞—Ç–∞ —à—Ç—Ä–∞—Ñ–æ–≤
  autoPayFines(chatId);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ —à—Ç—Ä–∞—Ñ–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userFines = fines[chatId] || [];
  const unpaidFines = userFines.filter((fine) => !fine.paid && !fine.cancelled);

  let response;
  if (unpaidFines.length > 0) {
    const fineList = unpaidFines.map((fine, index) => {
      return `–®—Ç—Ä–∞—Ñ ${index + 1}:\n` +
             `- –°—É–º–º–∞: ${fine.amount} –∞—Ä\n` +
             `- –ü—Ä–∏—á–∏–Ω–∞: ${fine.reason || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
             `- –î–∞—Ç–∞: ${new Date(fine.date).toLocaleString()}\n`;
    }).join('\n');

    response = `üõë –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã:\n\n${fineList}`;
  } else {
    response = '‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —à—Ç—Ä–∞—Ñ–æ–≤.';
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
  bot.sendMessage(chatId, response, {
    reply_markup: {
      inline_keyboard: [
        [
          { text: '‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é', callback_data: 'close_menu' },
          { text: 'üìÇ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞—Ä—Ö–∏–≤ —à—Ç—Ä–∞—Ñ–æ–≤', callback_data: 'archive' },
        ],
      ],
    },
  }).then((message) => {
    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
    safeDeleteMessage(chatId, msg.message_id);
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.on('callback_query', (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;

  if (data === 'close_menu') {
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é
    safeDeleteMessage(chatId, callbackQuery.message.message_id);
  } else if (data === 'archive') {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    safeDeleteMessage(chatId, callbackQuery.message.message_id);


  }
});


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —à—Ç—Ä–∞—Ñ–æ–≤ (–µ—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–∞–ª–æ–≥–æ–≤–æ–π —Ö–æ—á–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å)
bot.onText(/\/check_user_fines/, (msg) => {
  const chatId = msg.chat.id;

  if (!isWorker(chatId)) {
    bot.sendMessage(chatId, 'üõë –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–∞–ª–æ–≥–æ–≤–æ–π.');
    return;
  }

  const commandParts = msg.text.split(' ');
  const username = commandParts[1];

  if (!username) {
    bot.sendMessage(chatId, 'üõë –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä: /check_user_fines @username');
    return;
  }

  const targetUserId = Object.keys(users).find((id) => users[id]?.username === username);

  if (!targetUserId) {
    bot.sendMessage(chatId, `üõë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º ${username} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    return;
  }

  autoPayFines(targetUserId); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø–ª–∞—Ç–∞ —à—Ç—Ä–∞—Ñ–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

  const userFines = fines[targetUserId] || [];
  const unpaidFines = userFines.filter((fine) => !fine.paid && !fine.cancelled);

  if (unpaidFines.length > 0) {
    const fineList = unpaidFines.map((fine, index) => {
      return `–®—Ç—Ä–∞—Ñ ${index + 1}:\n` +
             `- –°—É–º–º–∞: ${fine.amount} –∞—Ä\n` +
             `- –ü—Ä–∏—á–∏–Ω–∞: ${fine.reason || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
             `- –î–∞—Ç–∞: ${new Date(fine.date).toLocaleString()}\n`;
    }).join('\n');

    bot.sendMessage(chatId, `üõë –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username} –µ—Å—Ç—å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã:\n\n${fineList}`);
  } else {
    bot.sendMessage(chatId, `‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username} –Ω–µ—Ç –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —à—Ç—Ä–∞—Ñ–æ–≤.`);
  }
});


// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É —Å –≤–æ–∑–º–æ–∂–Ω–æ–π –ø—Ä–∏—á–∏–Ω–æ–π

// –ö–æ–º–∞–Ω–¥–∞ /cancel_fine –¥–ª—è –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è —à—Ç—Ä–∞—Ñ–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –Ω–∞–ª–æ–≥–æ–≤–æ–π)
bot.onText(/\/cancel_fine (\d+)/, (msg, match) => {
  const chatId = msg.chat.id;
  const fineIndex = parseInt(match[1]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–º –Ω–∞–ª–æ–≥–æ–≤–æ–π
  if (!isTaxWorker(chatId)) {
    bot.sendMessage(chatId, 'üõë –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º –Ω–∞–ª–æ–≥–æ–≤–æ–π.');
    return;
  }

  // –ù–∞—Ö–æ–¥–∏–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–Ω–¥–µ–∫—Å—É —à—Ç—Ä–∞—Ñ–∞
  let targetUserId;
  for (const userId in fines) {
    if (fines[userId][fineIndex]) {
      targetUserId = userId;
      break;
    }
  }

  if (!targetUserId || !fines[targetUserId] || !fines[targetUserId][fineIndex]) {
    bot.sendMessage(chatId, 'üõë –®—Ç—Ä–∞—Ñ —Å —Ç–∞–∫–∏–º –∏–Ω–¥–µ–∫—Å–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    return;
  }

  const fine = fines[targetUserId][fineIndex];

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –æ—Ç–º–µ–Ω—ë–Ω —à—Ç—Ä–∞—Ñ
  if (fine.cancelled) {
    bot.sendMessage(chatId, `üõë –≠—Ç–æ—Ç —à—Ç—Ä–∞—Ñ —É–∂–µ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω.`);
    return;
  }

  // –ê–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —à—Ç—Ä–∞—Ñ–∞
  fine.cancelled = true;

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É–º–º—É —à—Ç—Ä–∞—Ñ–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  users[targetUserId].–∑–∞—è–≤–æ–∫ += fine.amount;

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–∞—Ö
  saveData(finesFile, fines);
  saveData(usersFile, users);

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –Ω–∞–ª–æ–≥–æ–≤–æ–π –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  bot.sendMessage(chatId, `üõë –®—Ç—Ä–∞—Ñ –¥–ª—è ${users[targetUserId].username} –Ω–∞ —Å—É–º–º—É ${fine.amount} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω.`);
  bot.sendMessage(targetUserId, `‚úÖ –í–∞—à —à—Ç—Ä–∞—Ñ –Ω–∞ —Å—É–º–º—É ${fine.amount} –±—ã–ª –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω. –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${users[targetUserId].balance}`);
});
// –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è /cancel_fine (–µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –Ω–∞–ø–∏—Å–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ)
bot.onText(/\/cancel_fine/, (msg) => {
  const chatId = msg.chat.id;

  if (!isTaxWorker(chatId)) {
    bot.sendMessage(chatId, 'üõë –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º –Ω–∞–ª–æ–≥–æ–≤–æ–π.');
    return;
  }

  bot.sendMessage(chatId, 'üõë –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: /cancel_fine <–∏–Ω–¥–µ–∫—Å —à—Ç—Ä–∞—Ñ–∞>\n–ü—Ä–∏–º–µ—Ä: /cancel_fine 2\n–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–∏—Ç —à—Ç—Ä–∞—Ñ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º.');
});
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –Ω–∞–ª–æ–≥–æ–≤–æ–π –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
function notifyTaxWorkers(paymentRequest) {
  taxWorkers.forEach(workerId => {
    bot.sendMessage(workerId, `üõë –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É:\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${paymentRequest.username}\n–°—É–º–º–∞: ${paymentRequest.amount}–∞—Ä\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${paymentRequest.comment}\n–î–∞—Ç–∞: ${paymentRequest.date}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π /list_payments`);
  });
}


// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É payments.json
const paymentsFile = './payments.json';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞
function loadData(filePath) {
  if (fs.existsSync(filePath)) {
    return JSON.parse(fs.readFileSync(filePath, 'utf8'));
  }
  return [];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª
function saveData(filePath, data) {
  fs.writeFileSync(filePath, JSON.stringify(data, null, 2));
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞ payments
let payments = loadData(paymentsFile);

// –ö–æ–º–∞–Ω–¥–∞ /pay
bot.onText(/\/pay (\d+)(?: (.+))?/, (msg, match) => {
  const chatId = msg.chat.id;
  const amount = parseInt(match[1]);
  const comment = match[2] || '–û–ø–ª–∞—Ç–∞ —à—Ç—Ä–∞—Ñ–∞';

  if (isNaN(amount) || amount <= 0) {
    bot.sendMessage(chatId, 'üõë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –æ–ø–ª–∞—Ç—ã.');
    return;
  }

  if (!users[chatId]) {
    bot.sendMessage(chatId, 'üõë –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register <–∏–º—è> –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
    return;
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É
  const paymentRequest = {
    userId: chatId,
    username: users[chatId].username,
    amount,
    comment,
    date: new Date().toISOString(),
    status: 'pending',
  };

  payments.push(paymentRequest);
  saveData(paymentsFile, payments);

  bot.sendMessage(chatId, `‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –Ω–∞ —Å—É–º–º—É ${amount} —Å–æ–∑–¥–∞–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.`);
  notifyTaxWorkers(paymentRequest);
});

// –ö–æ–º–∞–Ω–¥–∞ /list_payments
bot.onText(/\/payments_list/, (msg) => {

  const chatId = msg.chat.id;

  if (!isTaxWorker(chatId)) {
    bot.sendMessage(chatId, 'üõë –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º –Ω–∞–ª–æ–≥–æ–≤–æ–π.');
    return;
  }

  let paymentsList = 'üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –æ–ø–ª–∞—Ç—É:\n\n';
  const buttons = [];
  let foundPayments = false;

  payments.forEach((payment, index) => {
    if (payment.status === 'pending') {
      foundPayments = true;
      paymentsList += `–ó–∞—è–≤–∫–∞ ‚Ññ${index}\n` +
        `- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${payment.username}\n` +
        `- –°—É–º–º–∞: ${payment.amount} –∞—Ä\n` +
        `- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${payment.comment || '–ù–µ—Ç'}\n` +
        `- –î–∞—Ç–∞: ${payment.date}\n\n`;

      buttons.push([{
        text: `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É ‚Ññ${index}`,
        callback_data: `approve_payment_${index}`,
      }]);
    }
  });

  if (!foundPayments) {
    bot.sendMessage(chatId, '‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –æ–ø–ª–∞—Ç—É.');
    return;
  }

  bot.sendMessage(chatId, paymentsList, {
    reply_markup: {
      inline_keyboard: buttons,
    },
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;

  if (data.startsWith('approve_payment_')) {
    const paymentIndex = parseInt(data.split('_')[2]);

    if (isNaN(paymentIndex) || !payments[paymentIndex]) {
      bot.answerCallbackQuery(query.id, { text: '‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.' });
      return;
    }

    const payment = payments[paymentIndex];

    if (payment.status !== 'pending') {
      bot.answerCallbackQuery(query.id, { text: 'üõë –≠—Ç–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.' });
      return;
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–ø–ª–∞—Ç—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    users[payment.userId].balance += payment.amount;
    payment.status = 'approved';

    saveData(paymentsFile, payments);
    saveData(usersFile, users);

    bot.answerCallbackQuery(query.id, { text: `‚úÖ –û–ø–ª–∞—Ç–∞ –Ω–∞ —Å—É–º–º—É ${payment.amount} –∞—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.` });
    bot.sendMessage(chatId, `‚úÖ –û–ø–ª–∞—Ç–∞ –Ω–∞ —Å—É–º–º—É ${payment.amount} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${payment.username} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.`);
    bot.sendMessage(payment.userId, `‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –Ω–∞ —Å—É–º–º—É ${payment.amount} –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!`);
  }
});



bot.onText(/\/list_pending/, (msg) => {
  const chatId = msg.chat.id;

  // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–≤ –æ–∂–∏–¥–∞–Ω–∏–∏"
  const pendingDeliveries = deliveries.filter((d) => d.status === '–≤ –æ–∂–∏–¥–∞–Ω–∏–∏');

  if (pendingDeliveries.length === 0) {
    bot.sendMessage(chatId, '‚úÖ –í—Å–µ –∑–∞—è–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.');
    return;
  }

  pendingDeliveries.forEach((delivery, index) => {
    bot.sendMessage(
      chatId,
      `üì¶ *–ó–∞—è–≤–∫–∞ ‚Ññ${index + 1}:*\n\n` +
        `- –ù–∏–∫–Ω–µ–π–º: ${delivery.nickname}\n` +
        `- –¢–æ–≤–∞—Ä—ã: ${delivery.items}\n` +
        `- –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${delivery.coordinates}\n` +
        `- –î–∞—Ç–∞: ${delivery.date}\n` +
        `- –°—Ç–∞—Ç—É—Å: ${delivery.status}`,
      {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: `‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É ‚Ññ${index + 1}`, callback_data: `confirm_delivery_${delivery.nickname}` }
            ]
          ]
        }
      }
    );
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É"
bot.on('callback_query', (callbackQuery) => {
  const data = callbackQuery.data;

  if (data.startsWith('confirm_delivery_')) {
    const nickname = data.replace('confirm_delivery_', '');

    // –ù–∞—Ö–æ–¥–∏–º –∑–∞—è–≤–∫—É
    const delivery = deliveries.find((delivery) => delivery.nickname === nickname && delivery.status === '–≤ –æ–∂–∏–¥–∞–Ω–∏–∏');

    if (delivery) {
      delivery.status = '–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'; // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
      saveDeliveries();

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
      bot.sendMessage(adminChatId, `‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ –¥–ª—è ${nickname} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.`);

      // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      bot.editMessageReplyMarkup(
        { inline_keyboard: [] },
        { chat_id: callbackQuery.message.chat.id, message_id: callbackQuery.message.message_id }
      );

      bot.answerCallbackQuery(callbackQuery.id, { text: '–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!' });

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (delivery.chatId) {
        bot.sendMessage(
          delivery.chatId,
          `üì¶ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!`
        );
      }
    } else {
      bot.answerCallbackQuery(callbackQuery.id, { text: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.' });
    }
  }
});


const deliveriesFile = 'deliveries.json';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Å—Ç–∞–≤–∫–∞—Ö –∏–∑ —Ñ–∞–π–ª–∞
let deliveries = [];
if (fs.existsSync(deliveriesFile)) {
  deliveries = JSON.parse(fs.readFileSync(deliveriesFile, 'utf8'));
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
function saveDeliveries() {
  fs.writeFileSync(deliveriesFile, JSON.stringify(deliveries, null, 2), 'utf-8');
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Å—Ç–∞–≤–∫–∞—Ö
function loadDeliveries() {
  if (fs.existsSync(deliveriesFile)) {
    const data = fs.readFileSync(deliveriesFile, 'utf-8');
    return JSON.parse(data);
  }
  return [];
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞—è–≤–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
deliveries = loadDeliveries();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫ —Å –æ—à–∏–±–∫–∞–º–∏
const deliveryAttempts = {};

// –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞—è–≤–∫–∏
const deliveryFormatRegex =
  /–ù–∏–∫–Ω–µ–π–º:\s*(.+)\n–¢–æ–≤–∞—Ä—ã:\s*(.+)\n–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:\s*(.+)\n–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏:\s*(\d{2}\/\d{2}\/\d{4})/;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD/MM/YYYY
function getCurrentDate() {
  const today = new Date();
  const day = String(today.getDate()).padStart(2, '0');
  const month = String(today.getMonth() + 1).padStart(2, '0');
  const year = today.getFullYear();
  return `${day}/${month}/${year}`;
}

bot.onText(/\/(oformit_dostavky|–æ—Ñ–æ—Ä–º–∏—Ç—å_–¥–æ—Å—Ç–∞–≤–∫—É)/, (msg) => {
  const chatId = msg.chat.id;

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
  deliveryAttempts[chatId] = 0;

  // –¢–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
  const deliveryTemplate =
    `–ù–∏–∫–Ω–µ–π–º: \n–¢–æ–≤–∞—Ä—ã: \n–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: x y z\n–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏: ${getCurrentDate()}`;

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
  bot.sendMessage(
    chatId,
    `–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–∑—Ü—É:\n\n` +
      `*–û–±—Ä–∞–∑–µ—Ü:*\n\n${deliveryTemplate}\n\n` +
      `üìå –í–∞–∂–Ω–æ: –¢–æ–≤–∞—Ä—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑–¥–µ–ª—è–π—Ç–µ –∑–∞–ø—è—Ç—ã–º–∏.\n` + 
      `üìå –í–∞–∂–Ω–æ: –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è, –∞ –≤—ã–¥–∞–µ—Ç—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–º–∞–Ω–¥—ã /co i, /co near, /v –∏–ª–∏ –ø—Ä–µ—Ñ–∏–∫—Å), –≤ –ø–æ–ª–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –Ω—É–ª–∏.\n\n` +
      `–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å—Ç—Ä–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—É!`,
    {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–∑–µ—Ü',
              callback_data: 'copy_delivery_template',
            },
          ],
        ],
      },
    }
  );
});

// –°–ª—É—à–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
bot.on('callback_query', (query) => {
  const chatId = query.message.chat.id;

  if (query.data === 'copy_delivery_template') {
    const deliveryTemplate =
      `–ù–∏–∫–Ω–µ–π–º: \n–¢–æ–≤–∞—Ä—ã: \n–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: x y z\n–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏: ${getCurrentDate()}`;
    bot.sendMessage(chatId, deliveryTemplate, { parse_mode: 'Markdown' });
    bot.answerCallbackQuery(query.id, { text: '–®–∞–±–ª–æ–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!' });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫
bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (deliveryAttempts[chatId] === undefined) return;

  if (deliveryFormatRegex.test(text)) {
    const match = text.match(deliveryFormatRegex);
    const nickname = match[1].trim();

    if (!nickname) {
      bot.sendMessage(
        chatId,
        `‚ùå –ü–æ–ª–µ "–ù–∏–∫–Ω–µ–π–º" –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –ø–æ –æ–±—Ä–∞–∑—Ü—É!`
      );
      return;
    }

    deliveryAttempts[chatId] = 0;

    const deliveryData = {
      nickname: nickname,
      items: match[2].trim(),
      coordinates: match[3].trim(),
      date: match[4].trim(),
      chatId: chatId,
      status: '–≤ –æ–∂–∏–¥–∞–Ω–∏–∏',
    };

    deliveries.push(deliveryData);
    saveDeliveries();

    bot.sendMessage(chatId, '‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É!');

    bot.sendMessage(
      adminChatId,
      `üì¶ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É:*\n\n` +
        `*–ù–∏–∫–Ω–µ–π–º:* ${deliveryData.nickname}\n` +
        `*–¢–æ–≤–∞—Ä—ã:* ${deliveryData.items}\n` +
        `*–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:* ${deliveryData.coordinates}\n` +
        `*–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏:* ${deliveryData.date}\n` +
        `*–°—Ç–∞—Ç—É—Å:* ${deliveryData.status}`,
      {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É',
                callback_data: `confirm_${nickname}`,
              },
              {
                text: '–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É',
                callback_data: `cancel_${nickname}`,
              },
            ],
          ],
        },
      }
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–º–µ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏
bot.on('callback_query', (callbackQuery) => {
  const data = callbackQuery.data;

  if (data.startsWith('confirm_')) {
    const nickname = data.split('_')[1];
    const delivery = deliveries.find((delivery) => delivery.nickname === nickname);

    if (delivery) {
      delivery.status = '–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ';
      saveDeliveries();

      bot.sendMessage(adminChatId, `‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ –¥–ª—è ${nickname} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.`);
      bot.sendMessage(delivery.chatId, `üì¶ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!`);
    }
  }
  
  if (data.startsWith('cancel_')) {
    const nickname = data.split('_')[1];
    const index = deliveries.findIndex((delivery) => delivery.nickname === nickname);

    if (index !== -1) {
      deliveries.splice(index, 1);
      saveDeliveries();

      bot.sendMessage(adminChatId, `‚ùå –î–æ—Å—Ç–∞–≤–∫–∞ –¥–ª—è ${nickname} –æ—Ç–º–µ–Ω–µ–Ω–∞.`);
      bot.sendMessage(callbackQuery.message.chat.id, `üö´ –ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –æ—Ç–º–µ–Ω–µ–Ω–∞.`);
    }
  }

  bot.editMessageReplyMarkup(
    { inline_keyboard: [] },
    { chat_id: callbackQuery.message.chat.id, message_id: callbackQuery.message.message_id }
  );

  bot.answerCallbackQuery(callbackQuery.id, { text: '–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!' });
});

bot.onText(/\/submit_case/, (msg) => {
  const chatId = msg.chat.id;

  // –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
  const caseTemplate = 
    `–ö—Ç–æ –ø–æ–¥–∞–µ—Ç: \n` +
    `–ù–∞ –∫–æ–≥–æ: \n` +
    `–ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ: \n` +
    `–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: \n` +
    `–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: `;

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
  bot.sendMessage(
    chatId,
    `–ß—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ –≤ —Å—É–¥, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n` +         `–ö—Ç–æ –ø–æ–¥–∞–µ—Ç: –í–∞—à–µ –∏–º—è\n` +
    `–ù–∞ –∫–æ–≥–æ: –û—Ç–≤–µ—Ç—á–∏–∫\n` +
    `–ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ: –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n` +
    `–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: –î–µ—Ç–∞–ª–∏\n` +
    `–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –í–∞—à–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è`,
    {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–∑–µ—Ü(—Ç–µ–∫—Å—Ç —Å–Ω–∏–∑—É –º–æ–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∂–∞—Ç–∏–µ–º)",
              callback_data: "copy_template"
            }
          ]
        ]
      }
    }
  );

  // –°–ª—É—à–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
  bot.on('callback_query', (query) => {
    if (query.data === 'copy_template') {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      bot.sendMessage(chatId, `\`${caseTemplate}\``, { parse_mode: 'Markdown' });
    }
  });
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞—è–≤–ª–µ–Ω–∏—è –≤ —Å—É–¥
bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  const courtFormatRegex =
    /–ö—Ç–æ –ø–æ–¥–∞–µ—Ç: (.+)\n–ù–∞ –∫–æ–≥–æ: (.+)\n–ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ: (.+)\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: (.+)\n–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: (.+)/;

  if (courtFormatRegex.test(text)) {
    const match = text.match(courtFormatRegex);
    const courtData = {
      plaintiff: match[1],
      defendant: match[2],
      description: match[3],
      details: match[4],
      demands: match[5],
    };


    bot.sendMessage(
      adminChatId,
      `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤ —Å—É–¥:\n\n` +
        `–ö—Ç–æ –ø–æ–¥–∞–µ—Ç: ${courtData.plaintiff}\n` +
        `–ù–∞ –∫–æ–≥–æ: ${courtData.defendant}\n` +
        `–ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ: ${courtData.description}\n` +
        `–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${courtData.details}\n` +
        `–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: ${courtData.demands}`
    );

    bot.sendMessage(chatId, '‚úÖ –í–∞—à–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –≤ —Å—É–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
  }
});
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;

  const message = `–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã.\n\n` +
    `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ: /info\n` +
    `–ü–æ–¥–∞—Ç—å –¥–µ–ª–æ –≤ —Å—É–¥: /submit_case\n` +
    `–î–æ—Å—Ç–∞–≤–∫–∞: /–æ—Ñ–æ—Ä–º–∏—Ç—å_–¥–æ—Å—Ç–∞–≤–∫—É\n` +
    `–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: /register @username\n`;

  // –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  bot.sendMessage(chatId, message, {
    reply_markup: {
      remove_keyboard: true,
    },
  });
});

// –ö–æ–º–∞–Ω–¥–∞: /report_fine ‚Äî –û—Ç—á–µ—Ç –ø–æ —à—Ç—Ä–∞—Ñ–∞–º
bot.onText(/\/report_fine/, (msg) => {
  const chatId = msg.chat.id;

  if (!isWorker(chatId)) {
    bot.sendMessage(chatId, 'üõë –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.');
    return;
  }

  const { totalFines, totalPaid, totalCancelled, totalUnpaidAmount } = getFineStatistics();

  const report = `üìä –û—Ç—á–µ—Ç –ø–æ —à—Ç—Ä–∞—Ñ–∞–º:\n\n` +
                 `- –í—Å–µ–≥–æ –≤—ã–ø–∏—Å–∞–Ω–æ —à—Ç—Ä–∞—Ñ–æ–≤: ${totalFines}\n` +
                 `- –û–ø–ª–∞—á–µ–Ω–æ —à—Ç—Ä–∞—Ñ–æ–≤: ${totalPaid}\n` +
                 `- –ê–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–æ —à—Ç—Ä–∞—Ñ–æ–≤: ${totalCancelled}\n` +
                 `- –°—É–º–º–∞ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —à—Ç—Ä–∞—Ñ–æ–≤: ${totalUnpaidAmount} –∞—Ä\n`;

  bot.sendMessage(chatId, report, {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üîç –¢–æ–ø –¥–æ–ª–∂–Ω–∏–∫–æ–≤', callback_data: 'top_debtors' }],
        [{ text: '‚ùå –ó–∞–∫—Ä—ã—Ç—å', callback_data: 'close_report' }],
      ],
    },
  });
});

// –ö–æ–º–∞–Ω–¥–∞: /top_debtors ‚Äî –¢–æ–ø –¥–æ–ª–∂–Ω–∏–∫–æ–≤
bot.onText(/\/top_debtors/, (msg) => {
  const chatId = msg.chat.id;

  if (!isWorker(chatId)) {
    bot.sendMessage(chatId, 'üõë –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.');
    return;
  }

  const debtors = getTopDebtors();

  const response = debtors.length > 0
    ? 'üìã –¢–æ–ø –¥–æ–ª–∂–Ω–∏–∫–æ–≤:\n\n' + debtors.map((debtor, i) => `${i + 1}. ${debtor.username}: ${debtor.amount} –∞—Ä`).join('\n')
    : '‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–ø–ª–∞—Ç–∏–ª–∏ —Å–≤–æ–∏ —à—Ç—Ä–∞—Ñ—ã.';

  bot.sendMessage(chatId, response, {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üìä –û—Ç—á–µ—Ç –ø–æ —à—Ç—Ä–∞—Ñ–∞–º', callback_data: 'fine_report' }],
        [{ text: '‚ùå –ó–∞–∫—Ä—ã—Ç—å', callback_data: 'close_report' }],
      ],
    },
  });
});

// Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;

  if (data === 'close_report') {
    bot.deleteMessage(chatId, callbackQuery.message.message_id).catch(() => {});
  } else if (data === 'fine_report') {
    bot.deleteMessage(chatId, callbackQuery.message.message_id).catch(() => {});
    bot.sendMessage(chatId, '/report_fine'); // –í—ã–∑–æ–≤ –æ—Ç—á–µ—Ç–∞
  } else if (data === 'top_debtors') {
    bot.deleteMessage(chatId, callbackQuery.message.message_id).catch(() => {});
    bot.sendMessage(chatId, '/top_debtors'); // –í—ã–∑–æ–≤ —Ç–æ–ø–∞ –¥–æ–ª–∂–Ω–∏–∫–æ–≤
  }

  bot.answerCallbackQuery(callbackQuery.id);
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getFineStatistics() {
  let totalFines = 0;
  let totalPaid = 0;
  let totalCancelled = 0;
  let totalUnpaidAmount = 0;

  for (const userId in fines) {
    const userFines = fines[userId] || [];
    userFines.forEach((fine) => {
      totalFines++;
      if (fine.paid) totalPaid++;
      else if (fine.cancelled) totalCancelled++;
      else totalUnpaidAmount += fine.amount;
    });
  }

  return { totalFines, totalPaid, totalCancelled, totalUnpaidAmount };
}

function getTopDebtors() {
  const debtors = [];

  for (const userId in fines) {
    const userFines = fines[userId] || [];
    const unpaidAmount = userFines
      .filter(fine => !fine.paid && !fine.cancelled)
      .reduce((sum, fine) => sum + fine.amount, 0);

    if (unpaidAmount > 0) {
      debtors.push({ username: users[userId]?.username || `ID: ${userId}`, amount: unpaidAmount });
    }
  }

  return debtors.sort((a, b) => b.amount - a.amount).slice(0, 10);
}
bot.onText(/\/info/, (msg) => {
  const chatId = msg.chat.id;
  const infoMessage = 
    `ü§ñ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:</b>\n\n` +
    `–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ñ–æ—Ä–º–∏—Ç—å –±—ã—Å—Ç—Ä—É—é –¥–æ—Å—Ç–∞–≤–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ —É–∑–Ω–∞—Ç—å —à—Ç—Ä–∞—Ñ—ã (–≤–æ–∑–º–æ–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ). –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /–æ—Ñ–æ—Ä–º–∏—Ç—å_–¥–æ—Å—Ç–∞–≤–∫—É –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –æ–±—Ä–∞–∑—Ü—É.\n` + 
    `–î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –∫–æ–º–∞–Ω–¥–µ /help.\n\n` +
    `–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ê—Ä—Ç–∏–∫—É(@ArtikYaYa). –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!`;

  bot.sendMessage(chatId, infoMessage, { parse_mode: "HTML" });
});


// –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
const allowedUserIds = [6343971096, 2030128216];

// –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
const HISTORY_FILE = 'userHistory.json';

// –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
let userHistory = {};

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞
function loadHistory() {
    if (fs.existsSync(HISTORY_FILE)) {
        const data = fs.readFileSync(HISTORY_FILE, 'utf-8');
        userHistory = JSON.parse(data);
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤ —Ñ–∞–π–ª
function saveHistory() {
    fs.writeFileSync(HISTORY_FILE, JSON.stringify(userHistory, null, 2));
}

// –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
loadHistory();

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º
function isAllowed(userId) {
    return allowedUserIds.includes(userId);
}

// –ö–æ–º–∞–Ω–¥–∞ /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
bot.onText(/\/add (\d+) (.+)/, (msg, match) => {
    const userId = msg.from.id;

    if (!isAllowed(userId)) {
        return bot.sendMessage(userId, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
    }

    const targetUserId = parseInt(match[1], 10); // ID —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const message = match[2]; // –°–æ–æ–±—â–µ–Ω–∏–µ

    if (!userHistory[targetUserId]) {
        userHistory[targetUserId] = [];
    }

    userHistory[targetUserId].push(message);
    saveHistory(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
    bot.sendMessage(userId, `–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUserId}:\n"${message}"`);
});

// –ö–æ–º–∞–Ω–¥–∞ /history –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.onText(/\/history (\d+)/, (msg, match) => {
    const userId = msg.from.id;

    if (!isAllowed(userId)) {
        return bot.sendMessage(userId, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
    }

    const targetUserId = parseInt(match[1], 10); // ID —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const history = userHistory[targetUserId] || [];

    if (history.length === 0) {
        return bot.sendMessage(userId, `–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUserId} –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.`);
    }

    const historyText = history.map((item, index) => `${index + 1}. ${item}`).join('\n');
    bot.sendMessage(userId, `–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUserId}:\n${historyText}`);
});

// –ö–æ–º–∞–Ω–¥–∞ /clear –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.onText(/\/clear (\d+)/, (msg, match) => {
    const userId = msg.from.id;

    if (!isAllowed(userId)) {
        return bot.sendMessage(userId, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
    }

    const targetUserId = parseInt(match[1], 10); // ID —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userHistory[targetUserId] = [];
    saveHistory(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
    bot.sendMessage(userId, `–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUserId} –æ—á–∏—â–µ–Ω–∞.`);
});

// –ö–æ–º–∞–Ω–¥–∞ /all –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–æ—Ä–∏–µ–π
bot.onText(/\/all/, (msg) => {
    const userId = msg.from.id;

    if (!isAllowed(userId)) {
        return bot.sendMessage(userId, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
    }

    const usersWithHistory = Object.keys(userHistory)
        .filter((id) => userHistory[id] && userHistory[id].length > 0)
        .map((id) => `ID: ${id}, –ó–∞–ø–∏—Å–µ–π: ${userHistory[id].length}`);

    if (usersWithHistory.length === 0) {
        return bot.sendMessage(userId, '–ù–∏ —É –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.');
    }

    const response = usersWithHistory.join('\n');
    bot.sendMessage(userId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∑–∞–ø–∏—Å—è–º–∏:\n${response}`);
});





// –ú–∞—Å—Å–∏–≤ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
const knownCommands = [
  '/start',
  '/help',
  '/oformit_dostavky',
  '/–æ—Ñ–æ—Ä–º–∏—Ç—å_–¥–æ—Å—Ç–∞–≤–∫—É',
  '/contact',
  `/all`,
  `/history`,
  `/clear`,
  `/add`,
  `/info`,
  `/top_debtors`,
  `/check_fines`,
  `/archive`,
  `/list`,
  `/fine`,
  `/notify_debtors`,
  `/check_user_fines`,
  `/report_fine`,
  `/remove_worker`,
  `/add_worker`,
  `/payments_list`,
  `/submit_case`,
  `/register`,
  `/guess_game`,
  `/tap_game`,
  `/guess`,
  `/game`,
  `/worker_help`,
  `/list_pending`
];

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', (msg) => {
  const chatId = msg.chat.id;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å "/"
  if (msg.text && typeof msg.text === 'string' && msg.text.startsWith('/')) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤ —Å–ø–∏—Å–∫–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö
    if (!knownCommands.includes(msg.text.split(' ')[0])) {
      bot.sendMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.\n\n' +
    '–í–æ–∑–º–æ–∂–Ω–æ —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –≤–∞–º –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞\n\n' +
    '–ò–ª–∏ –ê—Ä—Ç–∏–∫ –∑–∞–±—ã–ª –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω–æ —ç—Ç–æ –≤—Ä—è–¥–ª–∏...');
    }
  }
});



const TAP_COUNTS_FILE = "tap_counts.json"; // –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
let tapCounts = {}; // –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –Ω–∞–∂–∞—Ç–∏–π
const startTime = Date.now(); // –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
const ADMIN_ID = 2030128216; // ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

let guessNumberGame = {
  active: false,
  number: null,
  attempts: {},
};

let rpsGame = {
  choices: ["–ö–∞–º–µ–Ω—å", "–ù–æ–∂–Ω–∏—Ü—ã", "–ë—É–º–∞–≥–∞"], // –í–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –∏–≥—Ä—ã
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
function loadTapCounts() {
  if (fs.existsSync(TAP_COUNTS_FILE)) {
    const data = fs.readFileSync(TAP_COUNTS_FILE);
    tapCounts = JSON.parse(data);
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
function saveTapCounts() {
  fs.writeFileSync(TAP_COUNTS_FILE, JSON.stringify(tapCounts, null, 2));
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
loadTapCounts();

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –∏–≥—Ä —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏
bot.onText(/\/game/, (msg) => {
  const chatId = msg.chat.id;

  bot.sendMessage(chatId, `üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –∏–≥—Ä! üåü –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:`, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üîò –¢–∞–ø –Ω–∞ –∫–Ω–æ–ø–∫—É", callback_data: "play_tap_game" }],
        [{ text: "üé≤ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ", callback_data: "play_guess_game" }],
        [{ text: "‚úä –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞", callback_data: "play_rps_game" }]
      ]
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –∏–∑ –º–µ–Ω—é –∏–≥—Ä
bot.on("callback_query", (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã "–¢–∞–ø –Ω–∞ –∫–Ω–æ–ø–∫—É"
  if (callbackQuery.data === "play_tap_game") {
    bot.sendMessage(chatId, `‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É "–¢–∞–ø –Ω–∞ –∫–Ω–æ–ø–∫—É"! ‚ú®\n\n` +
      `üîò –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ —Ä–∞–∑, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å —á–µ–º–ø–∏–æ–Ω–æ–º!\n` +
      `üèÜ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ç–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫—Ç–æ –ª–∏–¥–∏—Ä—É–µ—Ç.\n\n` +
      `–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! üöÄ –£–¥–∞—á–∏ –≤—Å–µ–º!`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üîò –¢–∞–ø–Ω—É—Ç—å!", callback_data: "tap" }],
            [{ text: "üèÜ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ø", callback_data: "show_top" }],
            [{ text: "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data: "my_stats" }]
          ]
        }
      });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ"
  if (callbackQuery.data === "play_guess_game") {
    if (!guessNumberGame.active) {
      guessNumberGame.active = true;
      guessNumberGame.number = Math.floor(Math.random() * 100) + 1; // –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
      guessNumberGame.attempts = {};

      bot.sendMessage(chatId, `üé≤ –ò–≥—Ä–∞ "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ" –Ω–∞—á–∞–ª–∞—Å—å! üåü\n\n` +
        `–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≥–∞–¥–∞—Ç—å! üéØ\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ!`, {
        reply_markup: {
          inline_keyboard: [
            [
              { text: "1-10", callback_data: "guess_1-10" },
              { text: "11-20", callback_data: "guess_11-20" },
              { text: "21-30", callback_data: "guess_21-30" }
            ],
            [
              { text: "31-40", callback_data: "guess_31-40" },
              { text: "41-50", callback_data: "guess_41-50" },
              { text: "51-60", callback_data: "guess_51-60" }
            ],
            [
              { text: "61-70", callback_data: "guess_61-70" },
              { text: "71-80", callback_data: "guess_71-80" },
              { text: "81-90", callback_data: "guess_81-90" }
            ],
            [
              { text: "91-100", callback_data: "guess_91-100" }
            ]
          ]
        }
      });
    } else {
      bot.sendMessage(chatId, "üé≤ –ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ. üåà");
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã "–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞"
  if (callbackQuery.data === "play_rps_game") {
    bot.sendMessage(chatId, `‚úä –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É "–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞"! üí•\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É:`, {
        reply_markup: {
          inline_keyboard: [
            [
              { text: "‚úä –ö–∞–º–µ–Ω—å", callback_data: "rps_rock" },
              { text: "‚úã –ë—É–º–∞–≥–∞", callback_data: "rps_paper" },
              { text: "‚úåÔ∏è –ù–æ–∂–Ω–∏—Ü—ã", callback_data: "rps_scissors" }
            ]
          ]
        }
      });
  }

  const userId = callbackQuery.from.id;
  const username = callbackQuery.from.username || callbackQuery.from.first_name || "–ê–Ω–æ–Ω–∏–º";

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫—É "üîò –¢–∞–ø–Ω—É—Ç—å!"
  if (callbackQuery.data === "tap") {
    if (!tapCounts[userId]) {
      tapCounts[userId] = { username: username, count: 0 };
    }
    tapCounts[userId].count += 1;

    const emojis = ["üî•", "‚ú®", "üöÄ", "üí•", "üéâ", "‚≠ê", "‚ö°"];
    const randomEmoji = emojis[Math.floor(Math.random() * emojis.length)];

    saveTapCounts();

    bot.answerCallbackQuery(callbackQuery.id, {
      text: `${randomEmoji} –í—ã –Ω–∞–∂–∞–ª–∏ ${tapCounts[userId].count} —Ä–∞–∑! üåü`,
      show_alert: false
    });
  }

  // "–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞" –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞
  if (callbackQuery.data.startsWith("rps_")) {
    const userChoice = callbackQuery.data.split("_")[1];
    const botChoice = rpsGame.choices[Math.floor(Math.random() * rpsGame.choices.length)];

    let result;
    if (userChoice === "rock") {
      result = botChoice === "–ù–æ–∂–Ω–∏—Ü—ã" ? "üéâ –ü–æ–±–µ–¥–∞!" : botChoice === "–ë—É–º–∞–≥–∞" ? "üí• –ü–æ—Ä–∞–∂–µ–Ω–∏–µ!" : "üîÑ –ù–∏—á—å—è!";
    } else if (userChoice === "paper") {
      result = botChoice === "–ö–∞–º–µ–Ω—å" ? "üéâ –ü–æ–±–µ–¥–∞!" : botChoice === "–ù–æ–∂–Ω–∏—Ü—ã" ? "üí• –ü–æ—Ä–∞–∂–µ–Ω–∏–µ!" : "üîÑ –ù–∏—á—å—è!";
    } else if (userChoice === "scissors") {
      result = botChoice === "–ë—É–º–∞–≥–∞" ? "üéâ –ü–æ–±–µ–¥–∞!" : botChoice === "–ö–∞–º–µ–Ω—å" ? "üí• –ü–æ—Ä–∞–∂–µ–Ω–∏–µ!" : "üîÑ –ù–∏—á—å—è!";
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    bot.sendMessage(chatId, `üïπ –í—ã –≤—ã–±—Ä–∞–ª–∏: *${userChoice === "rock" ? "–ö–∞–º–µ–Ω—å" : userChoice === "paper" ? "–ë—É–º–∞–≥–∞" : "–ù–æ–∂–Ω–∏—Ü—ã"}*\n` +
      `ü§ñ –ë–æ—Ç –≤—ã–±—Ä–∞–ª: *${botChoice}* \n\n` +
      `–†–µ–∑—É–ª—å—Ç–∞—Ç: *${result}* ‚ú®`, { parse_mode: "Markdown" });

    // –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      bot.deleteMessage(chatId, callbackQuery.message.message_id).catch(err => {
        console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: ${err.message}`);
      });
    }, 15000);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —á–∏—Å–µ–ª –¥–ª—è "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ"
  if (callbackQuery.data.startsWith("guess_")) {
    const range = callbackQuery.data.split("_")[1];
    const [min, max] = range.split("-").map(Number);

    if (min <= guessNumberGame.number && guessNumberGame.number <= max) {
      bot.sendMessage(chatId, `üéØ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —ç—Ç–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ (${min}-${max})!`);
    } else {
      bot.sendMessage(chatId, `‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –Ω–µ –≤ —ç—Ç–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!`);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üèÜ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ø"
  if (callbackQuery.data === "show_top") {
    const sortedUsers = Object.values(tapCounts).sort((a, b) => b.count - a.count);
    const topText = sortedUsers
      .slice(0, 10)
      .map((user, index) => `${index + 1}. ${user.username} ‚Äî ${user.count} —Ä–∞–∑`)
      .join("\n");

    const message = topText
      ? `üèÜ *–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:*\n\n${topText}`
      : "üòî –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –ø–µ—Ä–≤—ã–º!";

    bot.sendMessage(chatId, message, { parse_mode: "Markdown" });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
  if (callbackQuery.data === "my_stats") {
    const userStats = tapCounts[userId];
    const totalTime = ((Date.now() - startTime) / 1000).toFixed(1);

    if (userStats) {
      bot.answerCallbackQuery(callbackQuery.id, {
        text: `üìä ${username}, –≤—ã –Ω–∞–∂–∞–ª–∏ ${userStats.count} —Ä–∞–∑! üí•\n‚è≥ –ò–≥—Ä–∞ –¥–ª–∏—Ç—Å—è ${totalTime} —Å–µ–∫—É–Ω–¥. üöÄ`,
        show_alert: true
      });
    } else {
      bot.answerCallbackQuery(callbackQuery.id, {
        text: "üòî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∂–∞—Ç–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É! üéÆ",
        show_alert: true
      });
    }
  }
});
// –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (username –∏–ª–∏ id)
const allowedUsers = [
  { id: 6081062380, username: 'user1' },
  { id: 1923832824, username: 'user2' },
  { id: 1788399054, username: 'user3' },
  { id: 7886273686, username: 'user4' }
];

// –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ deliveries.json
function getDeliveries() {
  try {
    if (!fs.existsSync('deliveries.json')) {
      fs.writeFileSync('deliveries.json', '[]'); // –°–æ–∑–¥–∞—Ç—å –ø—É—Å—Ç–æ–π JSON –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      console.log('–§–∞–π–ª deliveries.json —Å–æ–∑–¥–∞–Ω.');
    }
    const data = fs.readFileSync('deliveries.json', 'utf8');
    return data ? JSON.parse(data) : [];
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è/–ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞ deliveries.json:', error.message);
    return [];
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
function formatDeliveries(deliveries) {
  if (deliveries.length === 0) {
    return '–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç.';
  }

  return deliveries.map((delivery, index) => {
    return `${index + 1}. –ù–∏–∫: ${delivery.nickname}\n   –ü—Ä–µ–¥–º–µ—Ç—ã: ${delivery.items}\n   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${delivery.coordinates}\n   –î–∞—Ç–∞: ${delivery.date}\n   ChatID: ${delivery.chatId}`;
  }).join('\n\n');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö
function isUserAllowed(user) {
  return allowedUsers.some((allowedUser) => allowedUser.id === user.id || allowedUser.username === user.username);
}

// –ö–æ–º–∞–Ω–¥–∞ /deliveries
bot.onText(/\/deliveries/, (msg) => {
  const user = msg.from;
  console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user);

  if (!isUserAllowed(user)) {
    bot.sendMessage(msg.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
    return;
  }

  const deliveries = getDeliveries();
  const response = formatDeliveries(deliveries);
  bot.sendMessage(msg.chat.id, response);
});

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
bot.on('message', (msg) => {
  console.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${msg.from.username || '–±–µ–∑ username'} (id: ${msg.from.id})`);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
bot.onText(/\/list/, (msg) => {
  const chatId = msg.chat.id;
  const userId = String(msg.from.id);

  if (!users[userId] || (users[userId].role !== 'worker' && users[userId].role !== 'admin')) {
    bot.sendMessage(chatId, '‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º –Ω–∞–ª–æ–≥–æ–≤–æ–π.');
    return;
  }

  const userList = Object.entries(users).map(([id, userData]) => {
    const username = userData.username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π";
    const balance = isNaN(userData.balance) ? 0 : userData.balance;
    const role = userData.role || "user";
    return `- ${username} (ID: \`${id}\`, –ë–∞–ª–∞–Ω—Å: ${balance}, –†–æ–ª—å: ${role})`;
  });

  if (userList.length === 0) {
    bot.sendMessage(chatId, "üìã **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç**.", { parse_mode: 'Markdown' });
    return;
  }

  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Å—Ç—è–º–∏ (–µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –±–æ–ª—å—à–æ–π)
  function sendChunks(chatId, messages, chunkSize = 4000) {
    let chunk = "";
    for (const msg of messages) {
      if (chunk.length + msg.length > chunkSize) {
        bot.sendMessage(chatId, chunk, { parse_mode: 'Markdown' });
        chunk = "";
      }
      chunk += msg + "\n";
    }
    if (chunk.length > 0) {
      bot.sendMessage(chatId, chunk, { parse_mode: 'Markdown' });
    }
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ —á–∞—Å—Ç—è–º
  sendChunks(chatId, userList);
});
